// Authors: Ivan Sovic

#include <pancake/MapperBatchBase.hpp>

#include <pbcopper/logging/Logging.h>

namespace PacBio {
namespace Pancake {

void MapperBatchBase::WorkerMapper_(const std::vector<MapperBatchChunk>& batchChunks,
                                    int32_t startId, int32_t endId,
                                    std::vector<std::vector<MapperBaseResult>>& results) const
{
    // Sanity check.
    assert(results.size() == batchChunks.size());
    if (results.size() != batchChunks.size()) {
        PBLOG_DEBUG << "The results vector is not of the same size as input batchChunks. "
                       "batchChunks.size() = "
                    << batchChunks.size() << ", results.size() = " << results.size();
        return;
    }

    // Create the mapper.
    MapperCLRSettings settingsCopy;
    MapperCLR mapper(settingsCopy);

    for (int32_t i = startId; i < endId; ++i) {
        const auto& chunk = batchChunks[i];

        // Create a copy of the settings so that we can turn off the alignment.
        settingsCopy.map = chunk.mapSettings;
        settingsCopy.align.align = false;
        mapper.UpdateSettings(settingsCopy);

        try {
            results[i] = mapper.MapAndAlign(chunk.targetSeqs, chunk.querySeqs);
        } catch (const std::exception& e) {
            // Log, but do not fail, so that we do not kill all other alignments in the batch.
            PBLOG_DEBUG << "MapperBatchCPU caught an exception generated by MapperCLR in "
                        << std::string(__FUNCTION__) << ". Worker chunk i = " << i
                        << ". Message: " << e.what();
            results[i] = std::vector<PacBio::Pancake::MapperBaseResult>(chunk.querySeqs.Size());
        }
    }
}

}  // namespace Pancake
}  // namespace PacBio
